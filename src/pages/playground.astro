---

import SideNavbar from "../components/SideNavbar"
import BaseLayout from "../layouts/BaseLayout.astro"
import ThemeToggle from '../components/ThemeToggle.astro';
import { Button } from "../components/ui/button";
import { Input } from "../components/ui/input";
import { LoadingSpinnerPlaygroundButton } from "../components/ui/loadingspinner";
import HistoryComponent from "../components/PlaygroundHistory";

const data: any = Astro.locals;

---

<BaseLayout
  title="Cronize - Playground"
  description="Cronize is a simple, easy to use, and free cronjob manager."
>
    <div class="hidden">
        <ThemeToggle />
    </div>
    <SideNavbar client:load username={data.username}>
        <div class="flex flex-col items-center bg-background">
            <div class="max-w-5xl w-full p-6 rounded-lg shadow-lg bg-card">
              <h1 class="text-2xl font-bold mb-4 text-card-foreground">Request Testing Playground</h1>
              <form class="space-y-4">
                <div>
                  <label for="url" class="block mb-1 text-sm font-medium text-card-foreground">
                    URL
                  </label>
                  <Input
                    id="playgroundUrl"
                    type="text"
                    placeholder="Enter a URL"
                    className="w-full px-3 py-2 rounded-md border border-input text-card-foreground bg-card focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                  />
                </div>
                <Button
                  className="w-full px-4 py-2 rounded-md bg-primary text-primary-foreground font-medium hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
                  id="handlePlaygroundSubmit"
                  type="button"
                >
                  <p id="playgroundSubmitText">Send Request</p>
                  <LoadingSpinnerPlaygroundButton />
                </Button>
              </form>
              <div class="mt-8 space-y-4">
                <div class="bg-muted rounded-md p-4 hidden" id="playgroundResponse">
                  <h2 class="text-lg font-medium mb-2 text-card-foreground">Response</h2>
                  <div class="text-sm text-muted-foreground">
                    <p class="mr-2 font-semibold text-lg">Status Code:
                      <br />
                      <span class="font-mono font-normal text-sm" id="playgroundResponseStatusCode"></span>
                    </p>
                    <p class="mr-2 font-semibold text-lg">Response Body:
                      <br />
                      <span class="font-mono font-normal text-sm overflow-x-auto break-words" id="playgroundResponseBody"></span>
                    </p>
                  </div>
                </div>
                <div class="bg-muted rounded-md p-4">
                  <h2 class="text-lg font-medium mb-2 text-card-foreground">History</h2>
                  <div class="text-sm text-muted-foreground">
                    <HistoryComponent client:load />
                  </div>
                </div>
              </div>
            </div>
          </div>
    </SideNavbar>
</BaseLayout>

<script>

  const tgt = document.querySelector("#handlePlaygroundSubmit");
  tgt!.addEventListener("click", async (e) => {
    // @ts-ignore
    const url = document.querySelector("#playgroundUrl")!.value;

    let status = 500;
    if (url) {
      console.log(url);

      // Set loading state to true
      // @ts-ignore
      document.getElementById("handlePlaygroundSubmit")!.disabled = true;
      document.getElementById("playgroundResponse")!.classList.remove("hidden");
      document.getElementById("playgroundSubmitSpinner")!.classList.remove("hidden");
      document.getElementById("playgroundSubmitText")!.classList.add("hidden");

      try {
        // Make the request
        const response = await fetch(url);
        status = response.status;
        console.log(response);

        document.getElementById("playgroundResponseStatusCode")!.innerText = `${status}`;
        document.getElementById("playgroundResponseBody")!.innerText = `${await response.text()}`;

        createListItem(url, `${status}`);

      } catch (error) {

        console.error(error);
        createListItem(url, status.toString());

        document.getElementById("playgroundResponseStatusCode")!.innerText = `Status Code: 500 (error during request)`;
        document.getElementById("playgroundResponseBody")!.innerText = ``;
      }

      // Save history record (request /api/addHistory)
      fetch('/api/addHistory', {
        method: 'POST',
        body: new URLSearchParams({
          url: url,
          status: status.toString()
        }),
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      });

      // update default UI states
      // @ts-ignore
      document.getElementById("handlePlaygroundSubmit")!.disabled = false;
      document.getElementById("playgroundSubmitSpinner")!.classList.add("hidden");
      document.getElementById("playgroundSubmitText")!.classList.remove("hidden");

    }
  });

  function createListItem(url, status) {
      const ul = document.getElementById('playgroundHistory')!;
      const li = document.createElement('li');
      const div = document.createElement('div');
      div.className = 'grid grid-cols-9 gap-x-4 gap-y-2 border-b border-card-foreground border-dashed';
      const spanUrl = document.createElement('span');
      spanUrl.textContent = url;
      spanUrl.className = 'font-mono font-normal text-sm col-span-6';
      const spanStatus = document.createElement('span');
      if (status.startsWith('2')) { spanStatus.className = 'text-green-500'; } else { spanStatus.className = 'text-red-500';}
      spanStatus.textContent = status;
      const spanTime = document.createElement('span');
      spanTime.className = 'italic col-span-2';
      spanTime.textContent = new Date().toLocaleString();
      div.appendChild(spanUrl);
      div.appendChild(spanStatus);
      div.appendChild(spanTime);
      li.appendChild(div);
      if (ul.children.length > 1) {
        ul.insertBefore(li, ul.children[1]);
      } else {
        ul.insertBefore(li, ul.firstChild);
      }
    }
</script>